{"ast":null,"code":"var _jsxFileName = \"/Users/mattairola/Project_Flashcards_Qualified_1/src/Deck/ViewDeck.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\nimport CardList from \"./CardList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewDeck = () => {\n  _s();\n\n  const {\n    url\n  } = useRouteMatch();\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  const [deck, setDeck] = useState({\n    id: 0,\n    name: \"\",\n    cards: []\n  });\n  useEffect(() => {\n    async function loadDeck() {\n      try {\n        const result = await readDeck(deckId);\n        setDeck(result);\n      } catch (error) {\n        console.log(\"Aborted Deck\");\n      }\n    }\n\n    loadDeck();\n  }, [deckId]);\n\n  const handleCardDelete = async ({\n    target\n  }) => {\n    const value = target.value;\n    const result = window.confirm(`Delete this ${value} card? \\n \\nYou will not be able to recover it.`);\n\n    if (result) {\n      async function deleteThisCard() {\n        try {\n          await deleteCard(value);\n          const valueFromAPI = await listCards(deckId);\n          setCards(valueFromAPI);\n        } catch (error) {\n          console.log(\"Aborted Card Delete\");\n        }\n      }\n\n      deleteThisCard();\n    }\n  };\n\n  const deleteDeckHandler = deckId => {\n    const result = window.confirm(`Delete this deck? \\n \\nYou will not be able to recover it.`);\n\n    if (result) {\n      async function deleteThisDeck() {\n        try {\n          await deleteDeck(deckId);\n          history.push(\"/\");\n        } catch (error) {\n          console.log(\"Aborted Deck Delete\");\n        }\n      }\n\n      deleteThisDeck();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"ViewDECK\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NewDeck, \"Ijpij3U/4r6v+lGAOri0SRCnO4Y=\", true, function () {\n  return [useRouteMatch, useParams];\n});\n\n_c = NewDeck;\nexport default NewDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewDeck\");","map":{"version":3,"sources":["/Users/mattairola/Project_Flashcards_Qualified_1/src/Deck/ViewDeck.js"],"names":["React","useState","useEffect","Link","useParams","useRouteMatch","readDeck","CardList","NewDeck","url","deckId","history","useHistory","deck","setDeck","id","name","cards","loadDeck","result","error","console","log","handleCardDelete","target","value","window","confirm","deleteThisCard","deleteCard","valueFromAPI","listCards","setCards","deleteDeckHandler","deleteThisDeck","deleteDeck","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,aAA1B,QAA+C,kBAA/C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA;AAAF,MAAUJ,aAAa,EAA7B;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAaN,SAAS,EAA5B;AACA,QAAMO,OAAO,GAAGC,UAAU,EAA1B;AACA,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBb,QAAQ,CAAC;AAC/Bc,IAAAA,EAAE,EAAE,CAD2B;AAE/BC,IAAAA,IAAI,EAAE,EAFyB;AAG/BC,IAAAA,KAAK,EAAE;AAHwB,GAAD,CAAlC;AAMAf,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAegB,QAAf,GAA0B;AACtB,UAAI;AACA,cAAMC,MAAM,GAAG,MAAMb,QAAQ,CAACI,MAAD,CAA7B;AACAI,QAAAA,OAAO,CAACK,MAAD,CAAP;AACH,OAHD,CAGC,OAAOC,KAAP,EAAa;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ;;AACDJ,IAAAA,QAAQ;AACX,GAVQ,EAUN,CAACR,MAAD,CAVM,CAAT;;AAYC,QAAMa,gBAAgB,GAAG,OAAO;AAAEC,IAAAA;AAAF,GAAP,KAAsB;AAC5C,UAAMC,KAAK,GAAGD,MAAM,CAACC,KAArB;AAEA,UAAMN,MAAM,GAAGO,MAAM,CAACC,OAAP,CAAgB,eAAcF,KAAM,iDAApC,CAAf;;AACA,QAAGN,MAAH,EAAW;AACP,qBAAeS,cAAf,GAAgC;AAC5B,YAAI;AACA,gBAAMC,UAAU,CAACJ,KAAD,CAAhB;AACA,gBAAMK,YAAY,GAAG,MAAMC,SAAS,CAACrB,MAAD,CAApC;AACAsB,UAAAA,QAAQ,CAACF,YAAD,CAAR;AACH,SAJD,CAIC,OAAOV,KAAP,EAAa;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;AACJ;;AACLM,MAAAA,cAAc;AACb;AACJ,GAhBA;;AAkBD,QAAMK,iBAAiB,GAAIvB,MAAD,IAAY;AAClC,UAAMS,MAAM,GAAGO,MAAM,CAACC,OAAP,CAAgB,4DAAhB,CAAf;;AACA,QAAGR,MAAH,EAAW;AACP,qBAAee,cAAf,GAAgC;AAC5B,YAAI;AACA,gBAAMC,UAAU,CAACzB,MAAD,CAAhB;AACAC,UAAAA,OAAO,CAACyB,IAAR,CAAa,GAAb;AACH,SAHD,CAGC,OAAOhB,KAAP,EAAa;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH;AACJ;;AACLY,MAAAA,cAAc;AACb;AACJ,GAbD;;AAiBA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CA5DD;;GAAM1B,O;UACcH,a,EACGD,S;;;KAFjBI,O;AA8DN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useRouteMatch } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\"\nimport CardList from \"./CardList\";\n \nconst NewDeck = () => {\n    const { url } = useRouteMatch();\n    const { deckId } = useParams();\n    const history = useHistory();\n    const [ deck, setDeck ] = useState({\n        id: 0,\n        name: \"\",\n        cards: []\n    });\n\n    useEffect(() => {\n        async function loadDeck() {\n            try {\n                const result = await readDeck(deckId);\n                setDeck(result);\n            }catch (error){\n                console.log(\"Aborted Deck\")\n            }\n        }\n        loadDeck();\n    }, [deckId]);\n\n     const handleCardDelete = async ({ target }) => {\n        const value = target.value;\n\n        const result = window.confirm(`Delete this ${value} card? \\n \\nYou will not be able to recover it.`);\n        if(result) {\n            async function deleteThisCard() {\n                try {\n                    await deleteCard(value);\n                    const valueFromAPI = await listCards(deckId);\n                    setCards(valueFromAPI)\n                }catch (error){\n                    console.log(\"Aborted Card Delete\")\n                }\n            }\n        deleteThisCard();\n        }\n    };\n\n    const deleteDeckHandler = (deckId) => {\n        const result = window.confirm(`Delete this deck? \\n \\nYou will not be able to recover it.`);\n        if(result) {\n            async function deleteThisDeck() {\n                try {\n                    await deleteDeck(deckId);\n                    history.push(\"/\");\n                }catch (error){\n                    console.log(\"Aborted Deck Delete\")\n                }\n            }\n        deleteThisDeck();\n        }\n    };\n\n\n\n    return (\n        <p>ViewDECK</p>\n    )\n}\n\nexport default NewDeck;"]},"metadata":{},"sourceType":"module"}